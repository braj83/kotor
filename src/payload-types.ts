/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    owners: Owner;
    apartments: Apartment;
    reservations: Reservation;
    cleaners: Cleaner;
    'cleaning-jobs': CleaningJob;
    'owner-expenses': OwnerExpense;
    'payment-details': PaymentDetail;
    'monthly-owner-ledger': MonthlyOwnerLedger;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    owners: OwnersSelect<false> | OwnersSelect<true>;
    apartments: ApartmentsSelect<false> | ApartmentsSelect<true>;
    reservations: ReservationsSelect<false> | ReservationsSelect<true>;
    cleaners: CleanersSelect<false> | CleanersSelect<true>;
    'cleaning-jobs': CleaningJobsSelect<false> | CleaningJobsSelect<true>;
    'owner-expenses': OwnerExpensesSelect<false> | OwnerExpensesSelect<true>;
    'payment-details': PaymentDetailsSelect<false> | PaymentDetailsSelect<true>;
    'monthly-owner-ledger': MonthlyOwnerLedgerSelect<false> | MonthlyOwnerLedgerSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  /**
   * User's full name
   */
  name: string;
  /**
   * User's first name
   */
  firstName?: string | null;
  /**
   * User's last name
   */
  lastName?: string | null;
  /**
   * User's role in the system
   */
  role:
    | 'super_admin'
    | 'property_manager'
    | 'operations_manager'
    | 'reservation_specialist'
    | 'cleaning_coordinator'
    | 'financial_manager'
    | 'customer_service'
    | 'maintenance_staff'
    | 'accountant'
    | 'read_only';
  /**
   * User's contact phone number
   */
  phone?: string | null;
  /**
   * User's address
   */
  address?: string | null;
  /**
   * Whether this user account is active
   */
  isActive?: boolean | null;
  /**
   * Date and time of last login
   */
  lastLogin?: string | null;
  /**
   * User's profile picture
   */
  profileImage?: (number | null) | Media;
  /**
   * Additional notes about this user
   */
  notes?: string | null;
  /**
   * Permissions are automatically set based on role, but can be manually overridden
   */
  permissions?: {
    /**
     * Create, edit, and delete property owners
     */
    canManageOwners?: boolean | null;
    /**
     * Create, edit, and delete apartment listings
     */
    canManageApartments?: boolean | null;
    /**
     * Create, edit, and manage guest reservations
     */
    canManageReservations?: boolean | null;
    /**
     * Manage cleaning staff and their assignments
     */
    canManageCleaners?: boolean | null;
    /**
     * Schedule and manage cleaning tasks
     */
    canManageCleaningJobs?: boolean | null;
    /**
     * Record and manage owner expenses
     */
    canManageExpenses?: boolean | null;
    /**
     * Process and manage payment records
     */
    canManagePayments?: boolean | null;
    /**
     * Access financial reports and analytics
     */
    canViewReports?: boolean | null;
    /**
     * Create and manage user accounts
     */
    canManageUsers?: boolean | null;
    /**
     * Upload and manage images and documents
     */
    canManageMedia?: boolean | null;
    /**
     * Export data to CSV, Excel, or other formats
     */
    canExportData?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "owners".
 */
export interface Owner {
  id: number;
  name: string;
  email: string;
  phone?: string | null;
  address?: string | null;
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apartments".
 */
export interface Apartment {
  id: number;
  /**
   * The name of the apartment (e.g., "Noah," "Sunny," "Red," "Ocean")
   */
  apartmentName: string;
  /**
   * The maximum number of guests the apartment can accommodate
   */
  capacity: number;
  /**
   * The owner of this apartment
   */
  owner: number | Owner;
  hasAC?: boolean | null;
  hasIron?: boolean | null;
  hasIroningBoard?: boolean | null;
  /**
   * Additional amenities as JSON data (e.g., ["WiFi", "Parking", "Balcony"])
   */
  otherAmenities?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Additional details about the apartment
   */
  description?: string | null;
  /**
   * Upload images of the apartment
   */
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reservations".
 */
export interface Reservation {
  id: number;
  /**
   * Unique identifier for the reservation (from Beds24 or other booking platform)
   */
  reservationId: string;
  /**
   * The apartment being reserved
   */
  apartment: number | Apartment;
  /**
   * Date and time of guest arrival
   */
  checkInDateTime: string;
  /**
   * Date and time of guest departure
   */
  checkOutDateTime: string;
  /**
   * Duration of the stay in nights
   */
  numberOfNights: number;
  /**
   * Count of adult guests
   */
  numberOfAdults: number;
  /**
   * Count of child guests
   */
  numberOfChildren?: number | null;
  /**
   * Indicates if a crib is required for a child
   */
  cribNeeded?: boolean | null;
  /**
   * Total amount paid by the guest for the reservation
   */
  guestPaidAmount: number;
  /**
   * Commission percentage charged by the booking platform (e.g., Beds24)
   */
  siteCommissionPercentage?: number | null;
  /**
   * Actual monetary amount of the site commission
   */
  siteCommissionAmount?: number | null;
  /**
   * Flag to indicate if the reservation has been cancelled
   */
  isCancelled?: boolean | null;
  /**
   * Specific instructions or notes for cancelled reservations (e.g., color-coding in the ledger)
   */
  cancellationNotes?: string | null;
  /**
   * Guest's confirmed arrival time, provided closer to the stay
   */
  confirmedArrivalTime?: string | null;
  /**
   * Indicates if an early check-in was requested
   */
  earlyCheckInRequested?: boolean | null;
  /**
   * Indicates if luggage storage was offered to the guest
   */
  luggageStorageOffered?: boolean | null;
  guestDetails?: {
    guestName?: string | null;
    guestEmail?: string | null;
    guestPhone?: string | null;
    specialRequests?: string | null;
  };
  bookingSource?: ('beds24' | 'booking' | 'airbnb' | 'direct' | 'other') | null;
  /**
   * Any additional notes about this reservation
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cleaners".
 */
export interface Cleaner {
  id: number;
  /**
   * The name of the cleaner (e.g., "Sandra," "Sneza," "Suada")
   */
  cleanerName: string;
  /**
   * Apartments this cleaner regularly maintains
   */
  assignedApartments?: (number | Apartment)[] | null;
  /**
   * The standard fixed price for cleaning an apartment
   */
  fixedCleaningPricePerApartment: number;
  /**
   * The percentage of cleaning fees the cleaner receives (e.g., 90%)
   */
  cleaningEarningPercentage: number;
  contactInfo?: {
    phone?: string | null;
    email?: string | null;
    address?: string | null;
  };
  availability?: {
    /**
     * Whether this cleaner is currently available for work
     */
    isActive?: boolean | null;
    preferredWorkingDays?:
      | ('monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday')[]
      | null;
    /**
     * Any special notes about availability or preferences
     */
    notes?: string | null;
  };
  performance?: {
    /**
     * Automatically tracked total of completed cleaning jobs
     */
    totalJobsCompleted?: number | null;
    /**
     * Average performance rating (1-5)
     */
    averageRating?: number | null;
    /**
     * Date of the most recent cleaning job
     */
    lastCleaningDate?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cleaning-jobs".
 */
export interface CleaningJob {
  id: number;
  /**
   * Unique identifier for each cleaning instance
   */
  cleaningJobId: string;
  /**
   * The apartment being cleaned
   */
  apartment: number | Apartment;
  /**
   * The date the cleaning is scheduled or performed
   */
  cleaningDate: string;
  /**
   * The cleaner assigned to this job
   */
  cleaner: number | Cleaner;
  /**
   * Priority level for cleaning tasks based on guest departure/arrival times (1 = highest priority)
   */
  cleaningOrderPriority: number;
  /**
   * Instructions regarding the apartment's climate control
   */
  climateControlInstruction?: ('turn_on' | 'turn_off' | 'leave_as_is' | 'set_temperature') | null;
  /**
   * Specific temperature setting (if applicable)
   */
  climateControlTemperature?: number | null;
  /**
   * The number of toilet paper rolls to be provided
   */
  toiletPaperRollsNeeded?: number | null;
  /**
   * Indicates if extra linen/towels for a sofa are needed
   */
  additionalSofaTowelsLinen?: boolean | null;
  /**
   * Indicates if double linen/towels are required for longer stays (over 3-4 nights)
   */
  doubleLinenTowelsNeeded?: boolean | null;
  linenDetails?: {
    numberOfBeds?: number | null;
    numberOfSofas?: number | null;
    /**
     * Calculated cost for washing and ironing linen, based on the number of beds/sofas
     */
    linenWashingPrice?: number | null;
  };
  financialDetails: {
    /**
     * The final amount the owner is charged for this specific cleaning, including linen
     */
    totalOwnerCostForCleaning: number;
    /**
     * The amount earned by the cleaner for this job
     */
    cleanerEarnings: number;
    /**
     * The agency's margin on the cleaning fee
     */
    agencyMarginOnCleaning?: number | null;
    /**
     * The amount paid to the laundry service for linen
     */
    laundryCost?: number | null;
    /**
     * The agency's earnings from linen services
     */
    agencyEarningsFromLinen?: number | null;
  };
  /**
   * Current status of the cleaning job
   */
  jobStatus?: ('scheduled' | 'in_progress' | 'completed' | 'cancelled' | 'rescheduled') | null;
  completionDetails?: {
    /**
     * When the cleaning actually started
     */
    actualStartTime?: string | null;
    /**
     * When the cleaning was completed
     */
    actualEndTime?: string | null;
    qualityCheckPassed?: boolean | null;
    /**
     * Notes from quality inspection
     */
    qualityCheckNotes?: string | null;
  };
  /**
   * Any special instructions for this cleaning job
   */
  specialInstructions?: string | null;
  /**
   * Any additional notes about this cleaning job
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "owner-expenses".
 */
export interface OwnerExpense {
  id: number;
  /**
   * Unique identifier for each expense entry
   */
  ownerExpenseId: string;
  /**
   * The owner this expense is charged to
   */
  owner: number | Owner;
  /**
   * The date the expense was incurred
   */
  expenseDate: string;
  /**
   * Description of the expense (e.g., "supplies purchase," "batteries," "toilet paper," "maintenance")
   */
  itemDescription: string;
  /**
   * Category of the expense for better organization
   */
  expenseCategory?:
    | ('supplies' | 'maintenance' | 'utilities' | 'cleaning_supplies' | 'toilet_paper' | 'batteries' | 'other')
    | null;
  /**
   * The initial cost of the item/service
   */
  baseCost: number;
  /**
   * Predefined margin applied to the cost (as percentage)
   */
  agencyMargin: number;
  /**
   * The final amount charged to the owner for this expense (Base Cost + Agency Margin)
   */
  totalCostToOwner: number;
  /**
   * Name of the supplier or vendor
   */
  supplier?: string | null;
  /**
   * Invoice or receipt number for record keeping
   */
  invoiceNumber?: string | null;
  /**
   * Current payment status of this expense
   */
  paymentStatus?: ('pending' | 'paid' | 'reimbursed' | 'disputed') | null;
  /**
   * Date when the expense was paid or reimbursed
   */
  paymentDate?: string | null;
  /**
   * Additional notes about this expense
   */
  notes?: string | null;
  /**
   * Upload receipt or invoice document
   */
  receipt?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-details".
 */
export interface PaymentDetail {
  id: number;
  /**
   * Unique identifier for each payment record
   */
  paymentDetailId: string;
  /**
   * The method used for payment
   */
  paymentMethod: 'card' | 'link' | 'direct_to_owner' | 'bank_transfer' | 'cash' | 'paypal' | 'other';
  /**
   * The exact amount if the payment went directly to the owner's account
   */
  amountDirectToOwner?: number | null;
  /**
   * The total amount of the payment
   */
  totalPaymentAmount: number;
  /**
   * Date and time when the payment was processed
   */
  paymentDate: string;
  /**
   * Current status of the payment
   */
  status?: ('pending' | 'completed' | 'failed' | 'refunded' | 'partially_refunded' | 'disputed') | null;
  /**
   * External transaction ID from payment processor
   */
  transactionId?: string | null;
  /**
   * The payment processor or platform used
   */
  paymentProcessor?: ('stripe' | 'paypal' | 'bank' | 'beds24' | 'booking' | 'airbnb' | 'other') | null;
  /**
   * Fee charged by the payment processor
   */
  processingFee?: number | null;
  /**
   * Amount after processing fees (Total Payment - Processing Fee)
   */
  netAmount?: number | null;
  /**
   * Currency of the payment
   */
  currency?: ('EUR' | 'USD' | 'GBP' | 'RSD' | 'other') | null;
  /**
   * Exchange rate used if different from base currency
   */
  exchangeRate?: number | null;
  refundDetails?: {
    refundAmount?: number | null;
    refundDate?: string | null;
    refundReason?: string | null;
    refundTransactionId?: string | null;
  };
  /**
   * Additional notes about this payment
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "monthly-owner-ledger".
 */
export interface MonthlyOwnerLedger {
  id: number;
  /**
   * Unique identifier for each ledger entry
   */
  ledgerEntryId: string;
  /**
   * The owner this ledger entry belongs to
   */
  owner: number | Owner;
  /**
   * The month and year for the ledger entry (e.g., "2023-08")
   */
  month: string;
  /**
   * Specific cleaning job (can be null)
   */
  cleaningJob?: (number | null) | CleaningJob;
  /**
   * Specific owner expense (can be null)
   */
  ownerExpense?: (number | null) | OwnerExpense;
  financialSummary: {
    /**
     * The guest's payment from the reservation
     */
    guestPaidAmount?: number | null;
    /**
     * The booking site's commission from the reservation
     */
    siteCommissionAmount?: number | null;
    /**
     * The cleaning cost passed to the owner
     */
    totalOwnerCostForCleaning?: number | null;
    /**
     * The total of "Ostali troškovi" from the Owner Expenses table
     */
    otherExpensesAmount?: number | null;
    /**
     * The calculated total earnings for the owner
     */
    totalEarnings: number;
    /**
     * The calculated net income for the owner (Total Earnings - Total Costs)
     */
    netIncome: number;
  };
  paymentDetails?: {
    /**
     * The payment method for the reservation
     */
    paymentMethod?: ('card' | 'link' | 'direct_to_owner' | 'bank_transfer' | 'cash' | 'paypal' | 'other') | null;
    /**
     * Amount paid directly to the owner's account
     */
    amountDirectToOwner?: number | null;
    /**
     * Date when payment was made to owner
     */
    paymentDate?: string | null;
  };
  /**
   * Current status of this ledger entry
   */
  status?: ('draft' | 'pending_review' | 'approved' | 'paid' | 'disputed') | null;
  breakdown?: {
    /**
     * Total number of reservations for this month
     */
    reservationCount?: number | null;
    /**
     * Total number of cleaning jobs for this month
     */
    cleaningJobsCount?: number | null;
    /**
     * Total number of expenses for this month
     */
    expensesCount?: number | null;
    /**
     * Average number of nights per reservation
     */
    averageStayLength?: number | null;
    /**
     * Percentage of time the apartment was occupied
     */
    occupancyRate?: number | null;
  };
  /**
   * Additional notes about this ledger entry
   */
  notes?: string | null;
  /**
   * Date when this ledger entry was generated
   */
  generatedDate?: string | null;
  /**
   * Date when this ledger entry was last updated
   */
  lastUpdated?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'owners';
        value: number | Owner;
      } | null)
    | ({
        relationTo: 'apartments';
        value: number | Apartment;
      } | null)
    | ({
        relationTo: 'reservations';
        value: number | Reservation;
      } | null)
    | ({
        relationTo: 'cleaners';
        value: number | Cleaner;
      } | null)
    | ({
        relationTo: 'cleaning-jobs';
        value: number | CleaningJob;
      } | null)
    | ({
        relationTo: 'owner-expenses';
        value: number | OwnerExpense;
      } | null)
    | ({
        relationTo: 'payment-details';
        value: number | PaymentDetail;
      } | null)
    | ({
        relationTo: 'monthly-owner-ledger';
        value: number | MonthlyOwnerLedger;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  firstName?: T;
  lastName?: T;
  role?: T;
  phone?: T;
  address?: T;
  isActive?: T;
  lastLogin?: T;
  profileImage?: T;
  notes?: T;
  permissions?:
    | T
    | {
        canManageOwners?: T;
        canManageApartments?: T;
        canManageReservations?: T;
        canManageCleaners?: T;
        canManageCleaningJobs?: T;
        canManageExpenses?: T;
        canManagePayments?: T;
        canViewReports?: T;
        canManageUsers?: T;
        canManageMedia?: T;
        canExportData?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "owners_select".
 */
export interface OwnersSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  phone?: T;
  address?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apartments_select".
 */
export interface ApartmentsSelect<T extends boolean = true> {
  apartmentName?: T;
  capacity?: T;
  owner?: T;
  hasAC?: T;
  hasIron?: T;
  hasIroningBoard?: T;
  otherAmenities?: T;
  description?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reservations_select".
 */
export interface ReservationsSelect<T extends boolean = true> {
  reservationId?: T;
  apartment?: T;
  checkInDateTime?: T;
  checkOutDateTime?: T;
  numberOfNights?: T;
  numberOfAdults?: T;
  numberOfChildren?: T;
  cribNeeded?: T;
  guestPaidAmount?: T;
  siteCommissionPercentage?: T;
  siteCommissionAmount?: T;
  isCancelled?: T;
  cancellationNotes?: T;
  confirmedArrivalTime?: T;
  earlyCheckInRequested?: T;
  luggageStorageOffered?: T;
  guestDetails?:
    | T
    | {
        guestName?: T;
        guestEmail?: T;
        guestPhone?: T;
        specialRequests?: T;
      };
  bookingSource?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cleaners_select".
 */
export interface CleanersSelect<T extends boolean = true> {
  cleanerName?: T;
  assignedApartments?: T;
  fixedCleaningPricePerApartment?: T;
  cleaningEarningPercentage?: T;
  contactInfo?:
    | T
    | {
        phone?: T;
        email?: T;
        address?: T;
      };
  availability?:
    | T
    | {
        isActive?: T;
        preferredWorkingDays?: T;
        notes?: T;
      };
  performance?:
    | T
    | {
        totalJobsCompleted?: T;
        averageRating?: T;
        lastCleaningDate?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cleaning-jobs_select".
 */
export interface CleaningJobsSelect<T extends boolean = true> {
  cleaningJobId?: T;
  apartment?: T;
  cleaningDate?: T;
  cleaner?: T;
  cleaningOrderPriority?: T;
  climateControlInstruction?: T;
  climateControlTemperature?: T;
  toiletPaperRollsNeeded?: T;
  additionalSofaTowelsLinen?: T;
  doubleLinenTowelsNeeded?: T;
  linenDetails?:
    | T
    | {
        numberOfBeds?: T;
        numberOfSofas?: T;
        linenWashingPrice?: T;
      };
  financialDetails?:
    | T
    | {
        totalOwnerCostForCleaning?: T;
        cleanerEarnings?: T;
        agencyMarginOnCleaning?: T;
        laundryCost?: T;
        agencyEarningsFromLinen?: T;
      };
  jobStatus?: T;
  completionDetails?:
    | T
    | {
        actualStartTime?: T;
        actualEndTime?: T;
        qualityCheckPassed?: T;
        qualityCheckNotes?: T;
      };
  specialInstructions?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "owner-expenses_select".
 */
export interface OwnerExpensesSelect<T extends boolean = true> {
  ownerExpenseId?: T;
  owner?: T;
  expenseDate?: T;
  itemDescription?: T;
  expenseCategory?: T;
  baseCost?: T;
  agencyMargin?: T;
  totalCostToOwner?: T;
  supplier?: T;
  invoiceNumber?: T;
  paymentStatus?: T;
  paymentDate?: T;
  notes?: T;
  receipt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-details_select".
 */
export interface PaymentDetailsSelect<T extends boolean = true> {
  paymentDetailId?: T;
  paymentMethod?: T;
  amountDirectToOwner?: T;
  totalPaymentAmount?: T;
  paymentDate?: T;
  status?: T;
  transactionId?: T;
  paymentProcessor?: T;
  processingFee?: T;
  netAmount?: T;
  currency?: T;
  exchangeRate?: T;
  refundDetails?:
    | T
    | {
        refundAmount?: T;
        refundDate?: T;
        refundReason?: T;
        refundTransactionId?: T;
      };
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "monthly-owner-ledger_select".
 */
export interface MonthlyOwnerLedgerSelect<T extends boolean = true> {
  ledgerEntryId?: T;
  owner?: T;
  month?: T;
  cleaningJob?: T;
  ownerExpense?: T;
  financialSummary?:
    | T
    | {
        guestPaidAmount?: T;
        siteCommissionAmount?: T;
        totalOwnerCostForCleaning?: T;
        otherExpensesAmount?: T;
        totalEarnings?: T;
        netIncome?: T;
      };
  paymentDetails?:
    | T
    | {
        paymentMethod?: T;
        amountDirectToOwner?: T;
        paymentDate?: T;
      };
  status?: T;
  breakdown?:
    | T
    | {
        reservationCount?: T;
        cleaningJobsCount?: T;
        expensesCount?: T;
        averageStayLength?: T;
        occupancyRate?: T;
      };
  notes?: T;
  generatedDate?: T;
  lastUpdated?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}